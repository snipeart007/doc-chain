// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package data_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	GetDocument(ctx context.Context, in *DocumentID, opts ...grpc.CallOption) (*Document, error)
	InsertDocument(ctx context.Context, in *CreateDocumentArgs, opts ...grpc.CallOption) (*DocumentID, error)
	StartMining(ctx context.Context, opts ...grpc.CallOption) (DataService_StartMiningClient, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) GetDocument(ctx context.Context, in *DocumentID, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/data_service.DataService/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) InsertDocument(ctx context.Context, in *CreateDocumentArgs, opts ...grpc.CallOption) (*DocumentID, error) {
	out := new(DocumentID)
	err := c.cc.Invoke(ctx, "/data_service.DataService/InsertDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) StartMining(ctx context.Context, opts ...grpc.CallOption) (DataService_StartMiningClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataService_ServiceDesc.Streams[0], "/data_service.DataService/StartMining", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServiceStartMiningClient{stream}
	return x, nil
}

type DataService_StartMiningClient interface {
	Send(*MineAttempt) error
	Recv() (*MineResult, error)
	grpc.ClientStream
}

type dataServiceStartMiningClient struct {
	grpc.ClientStream
}

func (x *dataServiceStartMiningClient) Send(m *MineAttempt) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataServiceStartMiningClient) Recv() (*MineResult, error) {
	m := new(MineResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	GetDocument(context.Context, *DocumentID) (*Document, error)
	InsertDocument(context.Context, *CreateDocumentArgs) (*DocumentID, error)
	StartMining(DataService_StartMiningServer) error
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) GetDocument(context.Context, *DocumentID) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedDataServiceServer) InsertDocument(context.Context, *CreateDocumentArgs) (*DocumentID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertDocument not implemented")
}
func (UnimplementedDataServiceServer) StartMining(DataService_StartMiningServer) error {
	return status.Errorf(codes.Unimplemented, "method StartMining not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.DataService/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDocument(ctx, req.(*DocumentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_InsertDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDocumentArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).InsertDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.DataService/InsertDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).InsertDocument(ctx, req.(*CreateDocumentArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_StartMining_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServiceServer).StartMining(&dataServiceStartMiningServer{stream})
}

type DataService_StartMiningServer interface {
	Send(*MineResult) error
	Recv() (*MineAttempt, error)
	grpc.ServerStream
}

type dataServiceStartMiningServer struct {
	grpc.ServerStream
}

func (x *dataServiceStartMiningServer) Send(m *MineResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataServiceStartMiningServer) Recv() (*MineAttempt, error) {
	m := new(MineAttempt)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data_service.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDocument",
			Handler:    _DataService_GetDocument_Handler,
		},
		{
			MethodName: "InsertDocument",
			Handler:    _DataService_InsertDocument_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartMining",
			Handler:       _DataService_StartMining_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "data_service/data_service.proto",
}
